import randomimport math
class network:    def __init__(self):        self.board = [[0 for i in range(6)] for i in range(100)]        for i in range(100):            for j in range(0,2):                self.board[i][j] = random.choice(range(1,100))                #x and y coordinates;            self.board[i][2] = random.choice([0,1])            #colour(active or inactive);            self.board[i][3] = 0            #interaction state, initially 0.            self.board[i][4] = random.choice([0,1])            #healthstate            self.board[i][5] = random.random()            #attractiveness            #until here, we've build a list 6 by 100, listing the attributions:            #[x,y,activeness,interaction,health,attractiveness]        #print "lala"        self.tabl = [[[0,0]for i in range(100)] for i in range(100)]        self.ttltabl = [[[0,0]for i in range(100)] for i in range(100)]        self.pts = 0        self.N = 0        self.T = 0        self.t = 0        #print "lala"        for i in range(100):            for j in range(0,2):                self.board[i][j] = random.choice(range(1,100))            self.board[i][2] = random.choice([0,1])        for i in range(100):            for j in range(i+1,100):                distance = (self.board[i][0] - self.board[j][0]) * (self.board[i][0] - self.board[j][0])                distance += (self.board[i][1] - self.board[j][1]) * (self.board[i][1] - self.board[j][1])                distance = math.sqrt(distance)                if (distance < 3 and self.board[i][2] == 1 and self.board[j][2] == 1):                 #it is a threshold value                    self.t = random.random()                    if (self.t > 0.3 and self.board[i][4] ==1 and self.board[j][4] == 0):                        self.board[j][4] = 1                        self.pts += 1                    elif (self.t > 0.3 and self.board[j][4] == 1 and self.board[i][4] == 0):                        self.board[i][4] = 1                        self.pts += 1                    else:                        self.pts = self.pts                    self.board[i][3] = 1                    self.board[j][3] = 1                    self.tabl[i][j][0] = 1                    self.tabl[i][j][1] = self.t                    self.tabl[j][i][0] = 1                    self.tabl[j][i][1] = self.t                    self.ttltabl[i][j][0] += 1                    self.ttltabl[i][j][1] += self.t                    self.ttltabl[j][i][0] += 1                    self.ttltabl[j][i][1] += self.t                    self.N += 1                    self.T += self.t
    def step(self):        for i in range(100):            rand = random.random()            max = 0            for j in range(100):                if i != j:                    if self.tabl[i][j][0] == 1:                        if max < self.board[j][5]:                            max = self.board[j][5]            if rand >= max:                for j in range(0,2):                    self.board[i][j] = random.choice(range(1,100))            self.board[i][2] = random.choice([0,1])        for i in range(100):            for j in range(i+1,100):                distance = (self.board[i][0] - self.board[j][0]) * (self.board[i][0] - self.board[j][0])                distance += (self.board[i][1] - self.board[j][1]) * (self.board[i][1] - self.board[j][1])                distance = math.sqrt(distance)                if (distance < 3 and self.board[i][2] == 1 and self.board[j][2] == 1):                 #3 is a threshold value                    self.t = random.random()                    if (self.t > 0.3 and self.board[i][4] ==1 and self.board[j][4] == 0):                        self.board[j][4] = 1                        self.pts += 1                    elif (self.t > 0.3 and self.board[j][4] == 1 and self.board[i][4] == 0):                        self.board[i][4] = 1                        self.pts += 1                    else:                        self.pts = self.pts                    self.tabl[i][j][0] = 1                    self.tabl[i][j][1] = self.t                    self.tabl[j][i][0] = 1                    self.tabl[j][i][1] = self.t                    self.ttltabl[i][j][0] += 1                    self.ttltabl[i][j][1] += self.t                    self.ttltabl[j][i][0] += 1                    self.ttltabl[j][i][1] += self.t                    self.N += 1                    self.T += self.t                else:                    self.tabl[i][j][0] = 0                    self.tabl[i][j][1] = 0                    self.tabl[j][i][0] = 0                    self.tabl[j][i][1] = 0        for i in range(100):            ni = 0            for j in range(100):                if i != j:                    ni += self.tabl[i][j][0]            if ni > 0:                self.board[i][3] = 1
    def gettabl(self):        return self.tabl
    def getttltabl(self):        return self.ttltabl
    def getN(self):        return self.N
    def getT(self):        return self.T        def getpts(self):        return self.pts
